# Headers and Inclusion Files
#
lib{glm}: {hxx ixx}{**} hxx{**.h}

# Module Interface Unit
#
lib{glm}: mxx{glm}: include = $config.glm.module

# Build Options
# These do only affect the building of the module
# and not the use of the header-only library.
#
cxx.poptions =+ "-I$src_root"
#
if ($config.glm.messages)
  cxx.poptions += -DGLM_FORCE_MESSAGES
if ($config.glm.platform_unknown)
  cxx.poptions += -DGLM_FORCE_PLATFORM_UNKNOWN
if ($config.glm.compiler_unknown)
  cxx.poptions += -DGLM_FORCE_COMPILER_UNKNOWN
if ($config.glm.arch_unknown)
  cxx.poptions += -DGLM_FORCE_ARCH_UNKNOWN
if ($config.glm.cxx_unknown)
  cxx.poptions += -DGLM_FORCE_CXX_UNKNOWN
#
if ($cxx.std != 'latest')
  cxx.poptions += "-DGLM_FORCE_CXX$cxx.std"
#
if ($config.glm.explicit_ctor)
  cxx.poptions += -DGLM_FORCE_EXPLICIT_CTOR
if ($config.glm.inline)
  cxx.poptions += -DGLM_FORCE_INLINE
if ($config.glm.aligned_gentypes)
  cxx.poptions += -DGLM_FORCE_ALIGNED_GENTYPES
if ($config.glm.default_aligned_gentypes)
  cxx.poptions += -DGLM_FORCE_DEFAULT_ALIGNED_GENTYPES
#
if ($config.glm.intrinsics)
  cxx.poptions += -DGLM_FORCE_INTRINSICS
#
# if ($config.glm.precision)
#
if ($config.glm.single_only)
  cxx.poptions += -DGLM_FORCE_SINGLE_ONLY
if ($config.glm.swizzle)
  cxx.poptions += -DGLM_FORCE_SWIZZLE
if ($config.glm.xyzw_only)
  cxx.poptions += -DGLM_FORCE_XYZW_ONLY
if ($config.glm.left_handed)
  cxx.poptions += -DGLM_FORCE_LEFT_HANDED
if ($config.glm.depth_zero_to_one)
  cxx.poptions += -DGLM_FORCE_DEPTH_ZERO_TO_ONE
if ($config.glm.size_t_length)
  cxx.poptions += -DGLM_FORCE_SIZE_T_LENGTH
if ($config.glm.unrestricted_gentype)
  cxx.poptions += -DGLM_FORCE_UNRESTRICTED_GENTYPE
if ($config.glm.quat_data_xyzw)
  cxx.poptions += -DGLM_FORCE_QUAT_DATA_XYZW

# Export Options
#
lib{glm}: cxx.export.poptions =+ "-I$src_root"

# Export Data
#
lib{glm}:
{
  export.metadata = 1 glm
  glm.module = [bool] $config.glm.module
}

# Install headers, inclusion files, and module interface units.
#
{hxx ixx mxx}{*}:
{
  install = include/glm/
  install.subdirs = true
}
